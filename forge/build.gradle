import net.darkhax.curseforgegradle.TaskPublishCurseForge;
plugins {
    id 'idea'
    id 'maven-publish'
    id "net.minecraftforge.gradle" version "6.+"
    id "org.spongepowered.mixin" version "0.7-SNAPSHOT"
    id "com.modrinth.minotaur" version"2.+"
    id "net.darkhax.curseforgegradle" version "1.1.18"
}

base {
    archivesName.set("Notebook-api-forge-${minecraft_version}")
}

mixin {
    add(sourceSets.main, "${mod_id}.refmap.json")
    config("${mod_id}.mixins.json")
    config("${mod_id}.forge.mixins.json")
}

minecraft {
    mappings channel: 'official', version: minecraft_version

    copyIdeResources = true //Calls processResources when in dev

    if (file('src/main/resources/META-INF/accesstransformer.cfg').exists()) {
        accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    }
    runs {
        client {
            workingDirectory project.file("run")
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName "Client"
            property "mixin.env.remapRefMap", "true"
            property "mixin.env.refMapRemappingFile", "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                modClientRun {
                    source sourceSets.main
                    source project(":common").sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Server'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                modServerRun {
                    source sourceSets.main
                    source project(":common").sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            args '--mod', mod_id, '--all', '--output', project(":common").file('src/generated/resources/'), '--existing', project(":common").file('src/main/resources/')
            taskName 'Data'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                modDataRun {
                    source sourceSets.main
                    source project(":common").sourceSets.main
                }
            }
        }
    }
}
modrinth {
    token.set(System.getenv("MODRINTH_TOKEN"))
    projectId.set("notebook-api")
    versionNumber.set("${project.mod_version}")
    versionName.set("[1.20.4] Notebook API Forge ${project.display_name}")
    versionType.set("release")
    uploadFile.set(tasks.jar)
    gameVersions.addAll("1.20.4")
    changelog = rootProject.file("CHANGELOG.md").text
    loaders.add("forge")
}

task curseforge(type: TaskPublishCurseForge) {
    apiToken = System.getenv("CURSEFORGE_TOKEN")

    def mainFile = upload(971909, jar)
    mainFile.releaseType = 'release'
    mainFile.displayName = "[1.20.4] Notebook API Forge ${display_name}"
    mainFile.addGameVersion("1.20.4")
    mainFile.addJavaVersion("Java 17")
    mainFile.changelog = rootProject.file("CHANGELOG.md").text
    mainFile.changelogType = 'markdown'
}
sourceSets.main.resources.srcDir "src/generated/resources"

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    compileOnly project(":common")
    annotationProcessor("org.spongepowered:mixin:0.8.5-SNAPSHOT:processor")
}

tasks.withType(JavaCompile).configureEach {
    source(project(":common").sourceSets.main.allSource)
}
tasks.withType(Javadoc).configureEach {
    source(project(":common").sourceSets.main.allJava)
}
tasks.named("sourcesJar", Jar) {
    from(project(":common").sourceSets.main.allSource)
}
processResources {
    from project(":common").sourceSets.main.resources
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = "Notebook-api-forge-${minecraft_version}"
            from components.java
            fg.component(it)
        }
    }

    repositories {
        maven {
            url = System.getenv("MAVEN_URL")
        }
    }
}

sourceSets.each {
    def dir = layout.buildDirectory.dir("sourcesSets/$it.name")
    it.output.resourcesDir = dir
    it.java.destinationDirectory = dir
}
signing {
    sign publishing.publications.mavenJava
}
