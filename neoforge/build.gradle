import net.darkhax.curseforgegradle.TaskPublishCurseForge
plugins {
    id 'idea'
    id 'maven-publish'
    id "net.neoforged.gradle.userdev" version "7.+"
    id 'java-library'
    id("com.modrinth.minotaur") version("2.+")
    id("net.darkhax.curseforgegradle") version("1.1.18")
}

base {
    archivesName.set("Notebook-api-neoforge-$minecraft_version")
}

if (file('src/main/resources/META-INF/accesstransformer.cfg').exists()) {
    minecraft.accessTransformers.file file('src/main/resources/META-INF/accesstransformer.cfg')
}
runs {
    configureEach {
        modSource project.sourceSets.main
    }
    client {
        systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
    }
    server {
        systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        programArgument '--nogui'
    }

    gameTestServer {
        systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
    }

    data {
        programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
    }
}
modrinth {
    token.set(System.getenv("MODRINTH_TOKEN"))
    projectId.set("notebook-api")
    versionNumber.set("${project.version}")
    versionName.set("[1.20.4] Notebook API NeoForge ${project.mod_version}")
    versionType.set("release")
    uploadFile.set(tasks.jar)
    gameVersions.addAll("1.20.4")
    changelog = rootProject.file("CHANGELOG.md").text
    loaders.add("neoforge")
}


task curseforge(type: TaskPublishCurseForge) {
    apiToken = System.getenv("CURSEFORGE_TOKEN")
    def mainFile = upload(971909, jar)
    mainFile.releaseType = "release"
    mainFile.displayName = "[1.20.4] Notebook API NeoForge ${display_name}"
    mainFile.addGameVersion("1.20.4")
    mainFile.addModLoader("NeoForge")
    mainFile.addJavaVersion("Java 17")
    mainFile.changelog = rootProject.file("CHANGELOG.md").text
    mainFile.changelogType = "markdown"
}
sourceSets.main.resources { srcDir "src/generated/resources" }

dependencies {
    implementation "net.neoforged:neoforge:${neoforge_version}"
    compileOnly project(":common")
}

// NeoGradle compiles the game, but we don't want to add our common code to the game's code
Spec<Task> notNeoTask = { Task it -> !it.name.startsWith("neo") } as Spec<Task>

tasks.withType(JavaCompile).matching(notNeoTask).configureEach {
    source(project(":common").sourceSets.main.allSource)
}

tasks.withType(Javadoc).matching(notNeoTask).configureEach {
    source(project(":common").sourceSets.main.allJava)
}

tasks.named("sourcesJar", Jar) {
    from(project(":common").sourceSets.main.allSource)
}

tasks.withType(ProcessResources).matching(notNeoTask).configureEach {
    from project(":common").sourceSets.main.resources
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = "Notebook-api-neoforge-${minecraft_version}"
            from components.java
        }
    }
    repositories {
        maven {
            url = System.getenv("MAVEN_URL")
        }
    }
}
signing {
    sign publishing.publications.mavenJava
}
